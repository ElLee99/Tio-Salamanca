
Tio_salamanca.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00000bba  00000c4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800168  00800168  00000cb6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cb6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ce8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000182d  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b93  00000000  00000000  0000269d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b47  00000000  00000000  00003230  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00003d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000666  00000000  00000000  000040dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dac  00000000  00000000  00004742  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000054ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_11>
  30:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 c6 02 	jmp	0x58c	; 0x58c <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea eb       	ldi	r30, 0xBA	; 186
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 36       	cpi	r26, 0x68	; 104
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e6       	ldi	r26, 0x68	; 104
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 39       	cpi	r26, 0x92	; 146
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <main>
  9e:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_Array>:
#include <stdlib.h>
#include <string.h>
#include "DYNAMIC_ARRAY.h"

//Initialize the array with 16 memory spaces from the type dyn_array
void init_Array(dyn_array *item){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
	item -> size = 0;
  ac:	1a 82       	std	Y+2, r1	; 0x02
	item -> elements = (uint8_t *)calloc(16, sizeof((*item).elements));
  ae:	62 e0       	ldi	r22, 0x02	; 2
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	80 e1       	ldi	r24, 0x10	; 16
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 91 03 	call	0x722	; 0x722 <calloc>
  ba:	99 83       	std	Y+1, r25	; 0x01
  bc:	88 83       	st	Y, r24
	item -> cap = 16;
  be:	80 e1       	ldi	r24, 0x10	; 16
  c0:	8b 83       	std	Y+3, r24	; 0x03
}
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <increase_Array>:

//Increase capacity of array by 4 spaces
void increase_Array(dyn_array *item){
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
	item -> elements = (uint8_t *)realloc(item -> elements, (4 + item -> cap ));
  ce:	6b 81       	ldd	r22, Y+3	; 0x03
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	6c 5f       	subi	r22, 0xFC	; 252
  d4:	7f 4f       	sbci	r23, 0xFF	; 255
  d6:	88 81       	ld	r24, Y
  d8:	99 81       	ldd	r25, Y+1	; 0x01
  da:	0e 94 ce 04 	call	0x99c	; 0x99c <realloc>
  de:	99 83       	std	Y+1, r25	; 0x01
  e0:	88 83       	st	Y, r24
	if (item -> elements != NULL){
  e2:	89 2b       	or	r24, r25
  e4:	19 f0       	breq	.+6      	; 0xec <increase_Array+0x24>
		item -> cap += 4;
  e6:	8b 81       	ldd	r24, Y+3	; 0x03
  e8:	8c 5f       	subi	r24, 0xFC	; 252
  ea:	8b 83       	std	Y+3, r24	; 0x03
	}
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <add_Element_Array>:

//Add elements to the array and if is already full, go to the increase_Array function 
void add_Element_Array(dyn_array *item, uint8_t letter){
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	fc 01       	movw	r30, r24
	if (item -> size < item -> cap){
  fa:	82 81       	ldd	r24, Z+2	; 0x02
  fc:	93 81       	ldd	r25, Z+3	; 0x03
  fe:	89 17       	cp	r24, r25
 100:	48 f4       	brcc	.+18     	; 0x114 <add_Element_Array+0x22>
		item -> elements [item -> size] = letter;
 102:	a0 81       	ld	r26, Z
 104:	b1 81       	ldd	r27, Z+1	; 0x01
 106:	a8 0f       	add	r26, r24
 108:	b1 1d       	adc	r27, r1
 10a:	6c 93       	st	X, r22
		item -> size ++;
 10c:	82 81       	ldd	r24, Z+2	; 0x02
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	82 83       	std	Z+2, r24	; 0x02
 112:	09 c0       	rjmp	.+18     	; 0x126 <add_Element_Array+0x34>
 114:	16 2f       	mov	r17, r22
 116:	ef 01       	movw	r28, r30
	}
													//In case of the array is completely full, go to the increase_Array function and try again
	else{
		//printf("Need to increase the array");
		increase_Array(item);
 118:	cf 01       	movw	r24, r30
 11a:	0e 94 64 00 	call	0xc8	; 0xc8 <increase_Array>
		add_Element_Array(item, letter);
 11e:	61 2f       	mov	r22, r17
 120:	ce 01       	movw	r24, r28
 122:	0e 94 79 00 	call	0xf2	; 0xf2 <add_Element_Array>
		//printf("Array increased by four");
	}
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	08 95       	ret

0000012e <clear_Array>:
	printf("The capacity of the array is %d\n", item -> cap);           
}*/


//Clear the array we have by setting all memory in 0
void clear_Array(dyn_array *item){
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	ec 01       	movw	r28, r24
	memset(item -> elements, 0, (sizeof(item -> elements) * (item -> cap)));
 134:	4b 81       	ldd	r20, Y+3	; 0x03
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	44 0f       	add	r20, r20
 13a:	55 1f       	adc	r21, r21
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	88 81       	ld	r24, Y
 142:	99 81       	ldd	r25, Y+1	; 0x01
 144:	0e 94 9d 05 	call	0xb3a	; 0xb3a <memset>
	item -> size = 0;
 148:	1a 82       	std	Y+2, r1	; 0x02
	item -> cap = 16;
 14a:	80 e1       	ldi	r24, 0x10	; 16
 14c:	8b 83       	std	Y+3, r24	; 0x03
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <enable_LCD>:
	if (action == 2){
		register_Select |= (1<<5);
	}
	
	*PORT = bitmask_Most4_Significant_Shifted(data) + register_Select;
	enable_LCD();
 154:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <PORT>
 158:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <PORT+0x1>
 15c:	80 81       	ld	r24, Z
 15e:	8f 7e       	andi	r24, 0xEF	; 239
 160:	80 83       	st	Z, r24
 162:	8f e9       	ldi	r24, 0x9F	; 159
 164:	9f e0       	ldi	r25, 0x0F	; 15
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <enable_LCD+0x12>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <enable_LCD+0x18>
 16c:	00 00       	nop
 16e:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <PORT>
 172:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <PORT+0x1>
 176:	80 81       	ld	r24, Z
 178:	80 61       	ori	r24, 0x10	; 16
 17a:	80 83       	st	Z, r24
 17c:	8f e9       	ldi	r24, 0x9F	; 159
 17e:	9f e0       	ldi	r25, 0x0F	; 15
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <enable_LCD+0x2c>
 184:	00 c0       	rjmp	.+0      	; 0x186 <enable_LCD+0x32>
 186:	00 00       	nop
 188:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <PORT>
 18c:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <PORT+0x1>
 190:	80 81       	ld	r24, Z
 192:	8f 7e       	andi	r24, 0xEF	; 239
 194:	80 83       	st	Z, r24
 196:	8f e3       	ldi	r24, 0x3F	; 63
 198:	9c e9       	ldi	r25, 0x9C	; 156
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <enable_LCD+0x46>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <enable_LCD+0x4c>
 1a0:	00 00       	nop
 1a2:	08 95       	ret

000001a4 <write_LCD>:
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	c6 2f       	mov	r28, r22
 1aa:	82 30       	cpi	r24, 0x02	; 2
 1ac:	11 f4       	brne	.+4      	; 0x1b2 <write_LCD+0xe>
 1ae:	d0 e2       	ldi	r29, 0x20	; 32
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <write_LCD+0x10>
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
 1b4:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <PORT>
 1b8:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <PORT+0x1>
 1bc:	8c 2f       	mov	r24, r28
 1be:	82 95       	swap	r24
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	8d 0f       	add	r24, r29
 1c4:	80 83       	st	Z, r24
 1c6:	0e 94 aa 00 	call	0x154	; 0x154 <enable_LCD>
 1ca:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <PORT>
 1ce:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <PORT+0x1>
 1d2:	cf 70       	andi	r28, 0x0F	; 15
 1d4:	cd 0f       	add	r28, r29
 1d6:	c0 83       	st	Z, r28
 1d8:	0e 94 aa 00 	call	0x154	; 0x154 <enable_LCD>
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <clear_LCD>:
}


//Clear the LCD
void clear_LCD (void){
	write_LCD(1, 0x01);
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <write_LCD>
 1ea:	08 95       	ret

000001ec <return_Home_LCD>:
}


//Returns the cursor to home position
void return_Home_LCD (void){
	write_LCD(1, 0x02);
 1ec:	62 e0       	ldi	r22, 0x02	; 2
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <write_LCD>
 1f4:	08 95       	ret

000001f6 <init_LCD>:
	The parameter must be the DDR direction from one port
	0x24 set the PORTB
	0x27 set the PORTC
	0x2A set the PORTD		
*/
void init_LCD(uint8_t *dir_DDRX){			
 1f6:	cf 93       	push	r28
	
	DDR = dir_DDRX;
 1f8:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <DDR+0x1>
 1fc:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <DDR>
	
	switch ((uint8_t)dir_DDRX){
 200:	99 27       	eor	r25, r25
 202:	87 32       	cpi	r24, 0x27	; 39
 204:	91 05       	cpc	r25, r1
 206:	91 f0       	breq	.+36     	; 0x22c <init_LCD+0x36>
 208:	8a 32       	cpi	r24, 0x2A	; 42
 20a:	91 05       	cpc	r25, r1
 20c:	e1 f0       	breq	.+56     	; 0x246 <init_LCD+0x50>
 20e:	84 97       	sbiw	r24, 0x24	; 36
 210:	39 f5       	brne	.+78     	; 0x260 <init_LCD+0x6a>
											//Set the PORTB to be used
		case 0x24:						
			PIN = (uint8_t*) 0x23;
 212:	83 e2       	ldi	r24, 0x23	; 35
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <PIN+0x1>
 21a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <PIN>
			PORT = (uint8_t*) 0x25;
 21e:	85 e2       	ldi	r24, 0x25	; 37
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <PORT+0x1>
 226:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <PORT>
			break;
 22a:	1e c0       	rjmp	.+60     	; 0x268 <init_LCD+0x72>
											//Set the PORTC to be used
		case 0x27:
			PIN = (uint8_t*) 0x26;
 22c:	86 e2       	ldi	r24, 0x26	; 38
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <PIN+0x1>
 234:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <PIN>
			PORT = (uint8_t*) 0x28;
 238:	88 e2       	ldi	r24, 0x28	; 40
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <PORT+0x1>
 240:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <PORT>
			break;
 244:	11 c0       	rjmp	.+34     	; 0x268 <init_LCD+0x72>
											//Set the PORTD to be used
		case 0x2A:
			PIN = (uint8_t*) 0x29;
 246:	89 e2       	ldi	r24, 0x29	; 41
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <PIN+0x1>
 24e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <PIN>
			PORT = (uint8_t*) 0x2B;
 252:	8b e2       	ldi	r24, 0x2B	; 43
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <PORT+0x1>
 25a:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <PORT>
			break;
 25e:	04 c0       	rjmp	.+8      	; 0x268 <init_LCD+0x72>
		
		default:
			exit(EXIT_FAILURE);
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	0e 94 db 05 	call	0xbb6	; 0xbb6 <_exit>
			break;
	}

											//Initializes the LCD
	*DDR = 0x3F;
 268:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <DDR>
 26c:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <DDR+0x1>
 270:	8f e3       	ldi	r24, 0x3F	; 63
 272:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	2f ef       	ldi	r18, 0xFF	; 255
 276:	80 e7       	ldi	r24, 0x70	; 112
 278:	92 e0       	ldi	r25, 0x02	; 2
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	80 40       	sbci	r24, 0x00	; 0
 27e:	90 40       	sbci	r25, 0x00	; 0
 280:	e1 f7       	brne	.-8      	; 0x27a <init_LCD+0x84>
 282:	00 c0       	rjmp	.+0      	; 0x284 <init_LCD+0x8e>
 284:	00 00       	nop

	if (action == 2){
		register_Select |= (1<<5);
	}
	
	*PORT = bitmask_Most4_Significant_Shifted(data) + register_Select;
 286:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <PORT>
 28a:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <PORT+0x1>
 28e:	c3 e0       	ldi	r28, 0x03	; 3
 290:	c0 83       	st	Z, r28
	enable_LCD();
 292:	0e 94 aa 00 	call	0x154	; 0x154 <enable_LCD>

	if (action == 2){
		register_Select |= (1<<5);
	}
	
	*PORT = bitmask_Most4_Significant_Shifted(data) + register_Select;
 296:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <PORT>
 29a:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <PORT+0x1>
 29e:	c0 83       	st	Z, r28
	enable_LCD();
 2a0:	0e 94 aa 00 	call	0x154	; 0x154 <enable_LCD>

	if (action == 2){
		register_Select |= (1<<5);
	}
	
	*PORT = bitmask_Most4_Significant_Shifted(data) + register_Select;
 2a4:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <PORT>
 2a8:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <PORT+0x1>
 2ac:	c0 83       	st	Z, r28
	enable_LCD();
 2ae:	0e 94 aa 00 	call	0x154	; 0x154 <enable_LCD>

	if (action == 2){
		register_Select |= (1<<5);
	}
	
	*PORT = bitmask_Most4_Significant_Shifted(data) + register_Select;
 2b2:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <PORT>
 2b6:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <PORT+0x1>
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	80 83       	st	Z, r24
	enable_LCD();
 2be:	0e 94 aa 00 	call	0x154	; 0x154 <enable_LCD>
	_delay_ms(50);
	write_LCD_8bits(1, 0x30);
	write_LCD_8bits(1, 0x30);
	write_LCD_8bits(1, 0x30);
	write_LCD_8bits(1, 0x20);
	write_LCD(1, 0x28);
 2c2:	68 e2       	ldi	r22, 0x28	; 40
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <write_LCD>
	write_LCD(1, 0x0F);
 2ca:	6f e0       	ldi	r22, 0x0F	; 15
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <write_LCD>
	clear_LCD();
 2d2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <clear_LCD>
	write_LCD(1, 0x06);
 2d6:	66 e0       	ldi	r22, 0x06	; 6
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <write_LCD>
	
}
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <gotoXY_LCD>:
								  2 to write in the second row
							 col: 1-16 to write in the selected column 
*/
void gotoXY_LCD (uint8_t row, uint8_t col){
	uint16_t coordinate;
	if (row == 1){
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	21 f4       	brne	.+8      	; 0x2ee <gotoXY_LCD+0xc>
		coordinate = 0x7F + col;
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	61 58       	subi	r22, 0x81	; 129
 2ea:	7f 4f       	sbci	r23, 0xFF	; 255
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <gotoXY_LCD+0x12>
	}
	else{
		coordinate = 0xBF + col;
 2ee:	70 e0       	ldi	r23, 0x00	; 0
 2f0:	61 54       	subi	r22, 0x41	; 65
 2f2:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	write_LCD(1, coordinate);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <write_LCD>
 2fa:	08 95       	ret

000002fc <print_LCD>:


/*Writes a whole phrase on the LCD until gets a NULL
  The parameter must be a string
*/
void print_LCD(uint8_t *string){
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
	while (*string != NULL){
 300:	fc 01       	movw	r30, r24
 302:	60 81       	ld	r22, Z
 304:	66 23       	and	r22, r22
 306:	41 f0       	breq	.+16     	; 0x318 <print_LCD+0x1c>
 308:	ec 01       	movw	r28, r24
 30a:	21 96       	adiw	r28, 0x01	; 1
		write_LCD(2, *string);
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <write_LCD>

/*Writes a whole phrase on the LCD until gets a NULL
  The parameter must be a string
*/
void print_LCD(uint8_t *string){
	while (*string != NULL){
 312:	69 91       	ld	r22, Y+
 314:	61 11       	cpse	r22, r1
 316:	fa cf       	rjmp	.-12     	; 0x30c <print_LCD+0x10>
		write_LCD(2, *string);
		string ++;
	}
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	08 95       	ret

0000031e <init_External_Interrupts>:
uint8_t boton_Interrupt = 0;
uint8_t already_Connected = 0;


void init_External_Interrupts(void){
	DDRD &= ~(1<<2);
 31e:	52 98       	cbi	0x0a, 2	; 10
	EICRA = (1<<ISC01);
 320:	e9 e6       	ldi	r30, 0x69	; 105
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC00);
 328:	80 81       	ld	r24, Z
 32a:	8e 7f       	andi	r24, 0xFE	; 254
 32c:	80 83       	st	Z, r24
	EIMSK = (1<<INT0);
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	8d bb       	out	0x1d, r24	; 29
 332:	08 95       	ret

00000334 <init_Timer1>:
	EIMSK &= ~(1<<INT0);
}*/


void init_Timer1(void){
	TCCR1A = 0X00;
 334:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1<<CS02) | (1<<CS00);
 338:	85 e0       	ldi	r24, 0x05	; 5
 33a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TIMSK1 = (1<<OCIE1B) | (1<<OCIE1A);
 33e:	86 e0       	ldi	r24, 0x06	; 6
 340:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	OCR1A = 30000;
 344:	80 e3       	ldi	r24, 0x30	; 48
 346:	95 e7       	ldi	r25, 0x75	; 117
 348:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 34c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	OCR1B = 60000;
 350:	80 e6       	ldi	r24, 0x60	; 96
 352:	9a ee       	ldi	r25, 0xEA	; 234
 354:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 358:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 35c:	08 95       	ret

0000035e <fill_Alphabet>:
/*void unable_Timer1(void){
	TIMSK1 &= ~(1<<OCIE1B) | ~(1<<OCIE1A);
}*/

//Fill the alphabet from A to Z in the alphabet var
void fill_Alphabet(alphabet *pointer){
 35e:	fc 01       	movw	r30, r24
 360:	91 e4       	ldi	r25, 0x41	; 65
	for (uint8_t i = 1; i <= 26; i++, pointer++){
		pointer -> letter = i+64;
 362:	91 93       	st	Z+, r25
 364:	9f 5f       	subi	r25, 0xFF	; 255
	TIMSK1 &= ~(1<<OCIE1B) | ~(1<<OCIE1A);
}*/

//Fill the alphabet from A to Z in the alphabet var
void fill_Alphabet(alphabet *pointer){
	for (uint8_t i = 1; i <= 26; i++, pointer++){
 366:	9b 35       	cpi	r25, 0x5B	; 91
 368:	e1 f7       	brne	.-8      	; 0x362 <fill_Alphabet+0x4>
		pointer -> letter = i+64;
	}
}
 36a:	08 95       	ret

0000036c <space_Cursor>:
}*/


//Writes one space on the LCD to the right 
void space_Cursor(void){
	write_LCD(1, 0x14);			//Move cursor one to the right
 36c:	64 e1       	ldi	r22, 0x14	; 20
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <write_LCD>
	write_LCD(2, 0x20);			//Writes a blank character
 374:	60 e2       	ldi	r22, 0x20	; 32
 376:	82 e0       	ldi	r24, 0x02	; 2
 378:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <write_LCD>
	write_LCD(1, 0x10);			//Move cursor one to the left
 37c:	60 e1       	ldi	r22, 0x10	; 16
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <write_LCD>
 384:	08 95       	ret

00000386 <check_Line_Break>:


/*In case the phrase is bigger than 16 characters, moves the LCD cursor to the second row 
and in case is bigger than 32 characters, clean the screen*/
void check_Line_Break(void){
	if (ptr_Phrase -> size == 16){
 386:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ptr_Phrase>
 38a:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ptr_Phrase+0x1>
 38e:	82 81       	ldd	r24, Z+2	; 0x02
 390:	80 31       	cpi	r24, 0x10	; 16
 392:	21 f4       	brne	.+8      	; 0x39c <check_Line_Break+0x16>
		gotoXY_LCD(2, 1);
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	0e 94 71 01 	call	0x2e2	; 0x2e2 <gotoXY_LCD>
	}
	if (ptr_Phrase -> size >= 32){
 39c:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ptr_Phrase>
 3a0:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ptr_Phrase+0x1>
 3a4:	82 81       	ldd	r24, Z+2	; 0x02
 3a6:	80 32       	cpi	r24, 0x20	; 32
 3a8:	58 f0       	brcs	.+22     	; 0x3c0 <check_Line_Break+0x3a>
 3aa:	2f ef       	ldi	r18, 0xFF	; 255
 3ac:	89 e6       	ldi	r24, 0x69	; 105
 3ae:	98 e1       	ldi	r25, 0x18	; 24
 3b0:	21 50       	subi	r18, 0x01	; 1
 3b2:	80 40       	sbci	r24, 0x00	; 0
 3b4:	90 40       	sbci	r25, 0x00	; 0
 3b6:	e1 f7       	brne	.-8      	; 0x3b0 <check_Line_Break+0x2a>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <check_Line_Break+0x34>
 3ba:	00 00       	nop
		_delay_ms(500);
		clear_LCD();
 3bc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <clear_LCD>
 3c0:	08 95       	ret

000003c2 <__vector_1>:


/*External Interrupt 
When the button is pressed writes a letter and moves the cursor one to the left
to change the letter in the same position*/
ISR(INT0_vect){
 3c2:	1f 92       	push	r1
 3c4:	0f 92       	push	r0
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	0f 92       	push	r0
 3ca:	11 24       	eor	r1, r1
 3cc:	2f 93       	push	r18
 3ce:	3f 93       	push	r19
 3d0:	4f 93       	push	r20
 3d2:	5f 93       	push	r21
 3d4:	6f 93       	push	r22
 3d6:	7f 93       	push	r23
 3d8:	8f 93       	push	r24
 3da:	9f 93       	push	r25
 3dc:	af 93       	push	r26
 3de:	bf 93       	push	r27
 3e0:	ef 93       	push	r30
 3e2:	ff 93       	push	r31
	TCNT1 = 0;
 3e4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 3e8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	boton_Interrupt = 1;
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <boton_Interrupt>
	write_LCD(2, ptr_Alphabet -> letter);
 3f2:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ptr_Alphabet>
 3f6:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ptr_Alphabet+0x1>
 3fa:	60 81       	ld	r22, Z
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <write_LCD>
	write_LCD(1, 0x10);  //move cursor 1 to the left
 402:	60 e1       	ldi	r22, 0x10	; 16
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <write_LCD>
	ptr_Alphabet ++;
 40a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ptr_Alphabet>
 40e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ptr_Alphabet+0x1>
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ptr_Alphabet+0x1>
 418:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ptr_Alphabet>
}
 41c:	ff 91       	pop	r31
 41e:	ef 91       	pop	r30
 420:	bf 91       	pop	r27
 422:	af 91       	pop	r26
 424:	9f 91       	pop	r25
 426:	8f 91       	pop	r24
 428:	7f 91       	pop	r23
 42a:	6f 91       	pop	r22
 42c:	5f 91       	pop	r21
 42e:	4f 91       	pop	r20
 430:	3f 91       	pop	r19
 432:	2f 91       	pop	r18
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <__vector_11>:


//Comparation A Timer 1 Interrupt
ISR(TIMER1_COMPA_vect){
 43e:	1f 92       	push	r1
 440:	0f 92       	push	r0
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	0f 92       	push	r0
 446:	11 24       	eor	r1, r1
 448:	2f 93       	push	r18
 44a:	3f 93       	push	r19
 44c:	4f 93       	push	r20
 44e:	5f 93       	push	r21
 450:	6f 93       	push	r22
 452:	7f 93       	push	r23
 454:	8f 93       	push	r24
 456:	9f 93       	push	r25
 458:	af 93       	push	r26
 45a:	bf 93       	push	r27
 45c:	ef 93       	push	r30
 45e:	ff 93       	push	r31

	if (boton_Interrupt == 1){
 460:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <boton_Interrupt>
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	d9 f4       	brne	.+54     	; 0x49e <__vector_11+0x60>
		TCNT1 = 0;
 468:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 46c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
		ptr_Alphabet --;
 470:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ptr_Alphabet>
 474:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ptr_Alphabet+0x1>
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ptr_Alphabet+0x1>
 47e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ptr_Alphabet>
		check_Line_Break();
 482:	0e 94 c3 01 	call	0x386	; 0x386 <check_Line_Break>
		add_Element_Array(ptr_Phrase, ptr_Alphabet -> letter);
 486:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <ptr_Alphabet>
 48a:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <ptr_Alphabet+0x1>
 48e:	60 81       	ld	r22, Z
 490:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ptr_Phrase>
 494:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ptr_Phrase+0x1>
 498:	0e 94 79 00 	call	0xf2	; 0xf2 <add_Element_Array>
 49c:	07 c0       	rjmp	.+14     	; 0x4ac <__vector_11+0x6e>
		
	}
	else{
		add_Element_Array(ptr_Phrase, ' ');
 49e:	60 e2       	ldi	r22, 0x20	; 32
 4a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ptr_Phrase>
 4a4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ptr_Phrase+0x1>
 4a8:	0e 94 79 00 	call	0xf2	; 0xf2 <add_Element_Array>
	}
	
	ptr_Alphabet = &alph1;
 4ac:	80 e7       	ldi	r24, 0x70	; 112
 4ae:	91 e0       	ldi	r25, 0x01	; 1
 4b0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ptr_Alphabet+0x1>
 4b4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ptr_Alphabet>
	space_Cursor();
 4b8:	0e 94 b6 01 	call	0x36c	; 0x36c <space_Cursor>
	boton_Interrupt = 0;
 4bc:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <boton_Interrupt>
	
}
 4c0:	ff 91       	pop	r31
 4c2:	ef 91       	pop	r30
 4c4:	bf 91       	pop	r27
 4c6:	af 91       	pop	r26
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	7f 91       	pop	r23
 4ce:	6f 91       	pop	r22
 4d0:	5f 91       	pop	r21
 4d2:	4f 91       	pop	r20
 4d4:	3f 91       	pop	r19
 4d6:	2f 91       	pop	r18
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <__vector_12>:


/*Comparation B Timer 1 Interrupt
When reaches it, sends the string we wrote on the LCD, cleans the screen and starts again*/
ISR(TIMER1_COMPB_vect){
 4e2:	1f 92       	push	r1
 4e4:	0f 92       	push	r0
 4e6:	0f b6       	in	r0, 0x3f	; 63
 4e8:	0f 92       	push	r0
 4ea:	11 24       	eor	r1, r1
 4ec:	2f 93       	push	r18
 4ee:	3f 93       	push	r19
 4f0:	4f 93       	push	r20
 4f2:	5f 93       	push	r21
 4f4:	6f 93       	push	r22
 4f6:	7f 93       	push	r23
 4f8:	8f 93       	push	r24
 4fa:	9f 93       	push	r25
 4fc:	af 93       	push	r26
 4fe:	bf 93       	push	r27
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	ef 93       	push	r30
 506:	ff 93       	push	r31
	
	TCNT1 = 0;
 508:	c4 e8       	ldi	r28, 0x84	; 132
 50a:	d0 e0       	ldi	r29, 0x00	; 0
 50c:	19 82       	std	Y+1, r1	; 0x01
 50e:	18 82       	st	Y, r1
	boton_Interrupt = 0;
 510:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <boton_Interrupt>
	ptr_Alphabet = &alph1;
 514:	80 e7       	ldi	r24, 0x70	; 112
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ptr_Alphabet+0x1>
 51c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ptr_Alphabet>
	clear_LCD();
 520:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <clear_LCD>
	return_Home_LCD();
 524:	0e 94 f6 00 	call	0x1ec	; 0x1ec <return_Home_LCD>
	print_LCD("    Enviando");
 528:	8a e0       	ldi	r24, 0x0A	; 10
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <print_LCD>
	write_Serial(ptr_Phrase -> elements);
 530:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <ptr_Phrase>
 534:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <ptr_Phrase+0x1>
 538:	80 81       	ld	r24, Z
 53a:	91 81       	ldd	r25, Z+1	; 0x01
 53c:	0e 94 6d 03 	call	0x6da	; 0x6da <write_Serial>
 540:	2f ef       	ldi	r18, 0xFF	; 255
 542:	89 e6       	ldi	r24, 0x69	; 105
 544:	98 e1       	ldi	r25, 0x18	; 24
 546:	21 50       	subi	r18, 0x01	; 1
 548:	80 40       	sbci	r24, 0x00	; 0
 54a:	90 40       	sbci	r25, 0x00	; 0
 54c:	e1 f7       	brne	.-8      	; 0x546 <__vector_12+0x64>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <__vector_12+0x6e>
 550:	00 00       	nop
	_delay_ms(500);
	clear_Array(ptr_Phrase);
 552:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ptr_Phrase>
 556:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ptr_Phrase+0x1>
 55a:	0e 94 97 00 	call	0x12e	; 0x12e <clear_Array>
	clear_LCD();
 55e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <clear_LCD>
	TCNT1 = 0;
 562:	19 82       	std	Y+1, r1	; 0x01
 564:	18 82       	st	Y, r1
	
}
 566:	ff 91       	pop	r31
 568:	ef 91       	pop	r30
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	bf 91       	pop	r27
 570:	af 91       	pop	r26
 572:	9f 91       	pop	r25
 574:	8f 91       	pop	r24
 576:	7f 91       	pop	r23
 578:	6f 91       	pop	r22
 57a:	5f 91       	pop	r21
 57c:	4f 91       	pop	r20
 57e:	3f 91       	pop	r19
 580:	2f 91       	pop	r18
 582:	0f 90       	pop	r0
 584:	0f be       	out	0x3f, r0	; 63
 586:	0f 90       	pop	r0
 588:	1f 90       	pop	r1
 58a:	18 95       	reti

0000058c <__vector_18>:


//RX completed interrupt
ISR(USART_RX_vect){
 58c:	1f 92       	push	r1
 58e:	0f 92       	push	r0
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	0f 92       	push	r0
 594:	11 24       	eor	r1, r1
 596:	8f 93       	push	r24
											//Waits for a "M", which means that has been connected
	if (UDR0 == 'M'){
 598:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 59c:	8d 34       	cpi	r24, 0x4D	; 77
 59e:	29 f4       	brne	.+10     	; 0x5aa <__vector_18+0x1e>
		already_Connected = 1;
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
		UDR0 = 0;
 5a6:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	}
}
 5aa:	8f 91       	pop	r24
 5ac:	0f 90       	pop	r0
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	0f 90       	pop	r0
 5b2:	1f 90       	pop	r1
 5b4:	18 95       	reti

000005b6 <main>:


int main(void)
{
	
	fill_Alphabet(ptr_Alphabet);
 5b6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ptr_Alphabet>
 5ba:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ptr_Alphabet+0x1>
 5be:	0e 94 af 01 	call	0x35e	; 0x35e <fill_Alphabet>
	init_LCD((uint8_t *)0x24);
 5c2:	84 e2       	ldi	r24, 0x24	; 36
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <init_LCD>
	init_Array(ptr_Phrase);
 5ca:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ptr_Phrase>
 5ce:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ptr_Phrase+0x1>
 5d2:	0e 94 53 00 	call	0xa6	; 0xa6 <init_Array>
	sei();									//Enables the interrupts
 5d6:	78 94       	sei
	init_USART();
 5d8:	0e 94 84 03 	call	0x708	; 0x708 <init_USART>
	
											//While is disconncted, writes a sequence on the LCD
	while (already_Connected == 0){
 5dc:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 5e0:	81 11       	cpse	r24, r1
 5e2:	24 c0       	rjmp	.+72     	; 0x62c <main+0x76>
		print_LCD("   Intentando");
 5e4:	87 e1       	ldi	r24, 0x17	; 23
 5e6:	91 e0       	ldi	r25, 0x01	; 1
 5e8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <print_LCD>
		gotoXY_LCD(2,0);
 5ec:	60 e0       	ldi	r22, 0x00	; 0
 5ee:	82 e0       	ldi	r24, 0x02	; 2
 5f0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <gotoXY_LCD>
		print_LCD("    conectar");
 5f4:	85 e2       	ldi	r24, 0x25	; 37
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <print_LCD>
 5fc:	2f ef       	ldi	r18, 0xFF	; 255
 5fe:	8d e3       	ldi	r24, 0x3D	; 61
 600:	99 e4       	ldi	r25, 0x49	; 73
 602:	21 50       	subi	r18, 0x01	; 1
 604:	80 40       	sbci	r24, 0x00	; 0
 606:	90 40       	sbci	r25, 0x00	; 0
 608:	e1 f7       	brne	.-8      	; 0x602 <main+0x4c>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <main+0x56>
 60c:	00 00       	nop
		_delay_ms(1500);
		clear_LCD();
 60e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <clear_LCD>
 612:	2f ef       	ldi	r18, 0xFF	; 255
 614:	8d e3       	ldi	r24, 0x3D	; 61
 616:	99 e4       	ldi	r25, 0x49	; 73
 618:	21 50       	subi	r18, 0x01	; 1
 61a:	80 40       	sbci	r24, 0x00	; 0
 61c:	90 40       	sbci	r25, 0x00	; 0
 61e:	e1 f7       	brne	.-8      	; 0x618 <main+0x62>
 620:	00 c0       	rjmp	.+0      	; 0x622 <main+0x6c>
 622:	00 00       	nop
	init_Array(ptr_Phrase);
	sei();									//Enables the interrupts
	init_USART();
	
											//While is disconncted, writes a sequence on the LCD
	while (already_Connected == 0){
 624:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 628:	88 23       	and	r24, r24
 62a:	e1 f2       	breq	.-72     	; 0x5e4 <main+0x2e>
		clear_LCD();
		_delay_ms(1500);
	}
											/*Once it's connected, starts the sequence and initialize 
											the External Interrupts and the Timer*/
	if (already_Connected == 1){
 62c:	81 30       	cpi	r24, 0x01	; 1
 62e:	d9 f5       	brne	.+118    	; 0x6a6 <main+0xf0>
		clear_LCD();
 630:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <clear_LCD>
		print_LCD("   Conectado");
 634:	82 e3       	ldi	r24, 0x32	; 50
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	0e 94 7e 01 	call	0x2fc	; 0x2fc <print_LCD>
		gotoXY_LCD(2, 0);
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	82 e0       	ldi	r24, 0x02	; 2
 640:	0e 94 71 01 	call	0x2e2	; 0x2e2 <gotoXY_LCD>
		print_LCD(" Correctamente");
 644:	8f e3       	ldi	r24, 0x3F	; 63
 646:	91 e0       	ldi	r25, 0x01	; 1
 648:	0e 94 7e 01 	call	0x2fc	; 0x2fc <print_LCD>
 64c:	2f ef       	ldi	r18, 0xFF	; 255
 64e:	83 ed       	ldi	r24, 0xD3	; 211
 650:	90 e3       	ldi	r25, 0x30	; 48
 652:	21 50       	subi	r18, 0x01	; 1
 654:	80 40       	sbci	r24, 0x00	; 0
 656:	90 40       	sbci	r25, 0x00	; 0
 658:	e1 f7       	brne	.-8      	; 0x652 <main+0x9c>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <main+0xa6>
 65c:	00 00       	nop
		_delay_ms(1000);
		clear_LCD();
 65e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <clear_LCD>
 662:	2f ef       	ldi	r18, 0xFF	; 255
 664:	83 ed       	ldi	r24, 0xD3	; 211
 666:	90 e3       	ldi	r25, 0x30	; 48
 668:	21 50       	subi	r18, 0x01	; 1
 66a:	80 40       	sbci	r24, 0x00	; 0
 66c:	90 40       	sbci	r25, 0x00	; 0
 66e:	e1 f7       	brne	.-8      	; 0x668 <main+0xb2>
 670:	00 c0       	rjmp	.+0      	; 0x672 <main+0xbc>
 672:	00 00       	nop
		_delay_ms(1000);
		print_LCD("   Escriba su");
 674:	8e e4       	ldi	r24, 0x4E	; 78
 676:	91 e0       	ldi	r25, 0x01	; 1
 678:	0e 94 7e 01 	call	0x2fc	; 0x2fc <print_LCD>
		gotoXY_LCD(2, 0);
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	82 e0       	ldi	r24, 0x02	; 2
 680:	0e 94 71 01 	call	0x2e2	; 0x2e2 <gotoXY_LCD>
		print_LCD ("    mensaje");
 684:	8c e5       	ldi	r24, 0x5C	; 92
 686:	91 e0       	ldi	r25, 0x01	; 1
 688:	0e 94 7e 01 	call	0x2fc	; 0x2fc <print_LCD>
 68c:	2f ef       	ldi	r18, 0xFF	; 255
 68e:	89 e6       	ldi	r24, 0x69	; 105
 690:	98 e1       	ldi	r25, 0x18	; 24
 692:	21 50       	subi	r18, 0x01	; 1
 694:	80 40       	sbci	r24, 0x00	; 0
 696:	90 40       	sbci	r25, 0x00	; 0
 698:	e1 f7       	brne	.-8      	; 0x692 <main+0xdc>
 69a:	00 c0       	rjmp	.+0      	; 0x69c <main+0xe6>
 69c:	00 00       	nop
		_delay_ms(500);
		init_External_Interrupts();
 69e:	0e 94 8f 01 	call	0x31e	; 0x31e <init_External_Interrupts>
		init_Timer1();
 6a2:	0e 94 9a 01 	call	0x334	; 0x334 <init_Timer1>
 6a6:	ff cf       	rjmp	.-2      	; 0x6a6 <main+0xf0>

000006a8 <line_Break_Serial>:
#include <avr/interrupt.h>
#include <util/delay.h>

//Attach one "character" of 8 bits in uint8_t format 
void attach_Serial (uint8_t data){
	UDR0 = data;
 6a8:	e6 ec       	ldi	r30, 0xC6	; 198
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	8a e0       	ldi	r24, 0x0A	; 10
 6ae:	80 83       	st	Z, r24
 6b0:	2f ef       	ldi	r18, 0xFF	; 255
 6b2:	86 e7       	ldi	r24, 0x76	; 118
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	21 50       	subi	r18, 0x01	; 1
 6b8:	80 40       	sbci	r24, 0x00	; 0
 6ba:	90 40       	sbci	r25, 0x00	; 0
 6bc:	e1 f7       	brne	.-8      	; 0x6b6 <line_Break_Serial+0xe>
 6be:	00 c0       	rjmp	.+0      	; 0x6c0 <line_Break_Serial+0x18>
 6c0:	00 00       	nop
 6c2:	8d e0       	ldi	r24, 0x0D	; 13
 6c4:	80 83       	st	Z, r24
 6c6:	2f ef       	ldi	r18, 0xFF	; 255
 6c8:	86 e7       	ldi	r24, 0x76	; 118
 6ca:	91 e0       	ldi	r25, 0x01	; 1
 6cc:	21 50       	subi	r18, 0x01	; 1
 6ce:	80 40       	sbci	r24, 0x00	; 0
 6d0:	90 40       	sbci	r25, 0x00	; 0
 6d2:	e1 f7       	brne	.-8      	; 0x6cc <line_Break_Serial+0x24>
 6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <line_Break_Serial+0x2e>
 6d6:	00 00       	nop
 6d8:	08 95       	ret

000006da <write_Serial>:
	attach_Serial(10);				//Break line
	attach_Serial(13);				//Carriage return
}

//Send a complete string through the usart protocol
void write_Serial (uint8_t *string){
 6da:	fc 01       	movw	r30, r24
	while (*string != NULL){
 6dc:	90 81       	ld	r25, Z
 6de:	99 23       	and	r25, r25
 6e0:	81 f0       	breq	.+32     	; 0x702 <write_Serial+0x28>
 6e2:	31 96       	adiw	r30, 0x01	; 1
#include <avr/interrupt.h>
#include <util/delay.h>

//Attach one "character" of 8 bits in uint8_t format 
void attach_Serial (uint8_t data){
	UDR0 = data;
 6e4:	a6 ec       	ldi	r26, 0xC6	; 198
 6e6:	b0 e0       	ldi	r27, 0x00	; 0
 6e8:	9c 93       	st	X, r25
 6ea:	2f ef       	ldi	r18, 0xFF	; 255
 6ec:	86 e7       	ldi	r24, 0x76	; 118
 6ee:	91 e0       	ldi	r25, 0x01	; 1
 6f0:	21 50       	subi	r18, 0x01	; 1
 6f2:	80 40       	sbci	r24, 0x00	; 0
 6f4:	90 40       	sbci	r25, 0x00	; 0
 6f6:	e1 f7       	brne	.-8      	; 0x6f0 <write_Serial+0x16>
 6f8:	00 c0       	rjmp	.+0      	; 0x6fa <write_Serial+0x20>
 6fa:	00 00       	nop
	attach_Serial(13);				//Carriage return
}

//Send a complete string through the usart protocol
void write_Serial (uint8_t *string){
	while (*string != NULL){
 6fc:	91 91       	ld	r25, Z+
 6fe:	91 11       	cpse	r25, r1
 700:	f3 cf       	rjmp	.-26     	; 0x6e8 <write_Serial+0xe>
		attach_Serial(*string);
		string++;
	}
	line_Break_Serial();
 702:	0e 94 54 03 	call	0x6a8	; 0x6a8 <line_Break_Serial>
 706:	08 95       	ret

00000708 <init_USART>:
}

//Initiate the UART protocol 
void init_USART (){
	UBRR0H = (BRC>>8);												//Baudrate configuration displaced 8 bits to the right
 708:	83 e0       	ldi	r24, 0x03	; 3
 70a:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = BRC;													//Baudrate configuration
 70e:	80 e4       	ldi	r24, 0x40	; 64
 710:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);					/*Receiver enable | Transmitter enable
 714:	88 e9       	ldi	r24, 0x98	; 152
 716:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
																	  RX Complete Interrupt Enable*/
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);								//Word lenght of 8 bits
 71a:	86 e0       	ldi	r24, 0x06	; 6
 71c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 720:	08 95       	ret

00000722 <calloc>:
 722:	0f 93       	push	r16
 724:	1f 93       	push	r17
 726:	cf 93       	push	r28
 728:	df 93       	push	r29
 72a:	86 9f       	mul	r24, r22
 72c:	80 01       	movw	r16, r0
 72e:	87 9f       	mul	r24, r23
 730:	10 0d       	add	r17, r0
 732:	96 9f       	mul	r25, r22
 734:	10 0d       	add	r17, r0
 736:	11 24       	eor	r1, r1
 738:	c8 01       	movw	r24, r16
 73a:	0e 94 ad 03 	call	0x75a	; 0x75a <malloc>
 73e:	ec 01       	movw	r28, r24
 740:	00 97       	sbiw	r24, 0x00	; 0
 742:	29 f0       	breq	.+10     	; 0x74e <calloc+0x2c>
 744:	a8 01       	movw	r20, r16
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	70 e0       	ldi	r23, 0x00	; 0
 74a:	0e 94 9d 05 	call	0xb3a	; 0xb3a <memset>
 74e:	ce 01       	movw	r24, r28
 750:	df 91       	pop	r29
 752:	cf 91       	pop	r28
 754:	1f 91       	pop	r17
 756:	0f 91       	pop	r16
 758:	08 95       	ret

0000075a <malloc>:
 75a:	0f 93       	push	r16
 75c:	1f 93       	push	r17
 75e:	cf 93       	push	r28
 760:	df 93       	push	r29
 762:	82 30       	cpi	r24, 0x02	; 2
 764:	91 05       	cpc	r25, r1
 766:	10 f4       	brcc	.+4      	; 0x76c <malloc+0x12>
 768:	82 e0       	ldi	r24, 0x02	; 2
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	e0 91 90 01 	lds	r30, 0x0190	; 0x800190 <__flp>
 770:	f0 91 91 01 	lds	r31, 0x0191	; 0x800191 <__flp+0x1>
 774:	20 e0       	ldi	r18, 0x00	; 0
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	a0 e0       	ldi	r26, 0x00	; 0
 77a:	b0 e0       	ldi	r27, 0x00	; 0
 77c:	30 97       	sbiw	r30, 0x00	; 0
 77e:	19 f1       	breq	.+70     	; 0x7c6 <malloc+0x6c>
 780:	40 81       	ld	r20, Z
 782:	51 81       	ldd	r21, Z+1	; 0x01
 784:	02 81       	ldd	r16, Z+2	; 0x02
 786:	13 81       	ldd	r17, Z+3	; 0x03
 788:	48 17       	cp	r20, r24
 78a:	59 07       	cpc	r21, r25
 78c:	c8 f0       	brcs	.+50     	; 0x7c0 <malloc+0x66>
 78e:	84 17       	cp	r24, r20
 790:	95 07       	cpc	r25, r21
 792:	69 f4       	brne	.+26     	; 0x7ae <malloc+0x54>
 794:	10 97       	sbiw	r26, 0x00	; 0
 796:	31 f0       	breq	.+12     	; 0x7a4 <malloc+0x4a>
 798:	12 96       	adiw	r26, 0x02	; 2
 79a:	0c 93       	st	X, r16
 79c:	12 97       	sbiw	r26, 0x02	; 2
 79e:	13 96       	adiw	r26, 0x03	; 3
 7a0:	1c 93       	st	X, r17
 7a2:	27 c0       	rjmp	.+78     	; 0x7f2 <malloc+0x98>
 7a4:	00 93 90 01 	sts	0x0190, r16	; 0x800190 <__flp>
 7a8:	10 93 91 01 	sts	0x0191, r17	; 0x800191 <__flp+0x1>
 7ac:	22 c0       	rjmp	.+68     	; 0x7f2 <malloc+0x98>
 7ae:	21 15       	cp	r18, r1
 7b0:	31 05       	cpc	r19, r1
 7b2:	19 f0       	breq	.+6      	; 0x7ba <malloc+0x60>
 7b4:	42 17       	cp	r20, r18
 7b6:	53 07       	cpc	r21, r19
 7b8:	18 f4       	brcc	.+6      	; 0x7c0 <malloc+0x66>
 7ba:	9a 01       	movw	r18, r20
 7bc:	bd 01       	movw	r22, r26
 7be:	ef 01       	movw	r28, r30
 7c0:	df 01       	movw	r26, r30
 7c2:	f8 01       	movw	r30, r16
 7c4:	db cf       	rjmp	.-74     	; 0x77c <malloc+0x22>
 7c6:	21 15       	cp	r18, r1
 7c8:	31 05       	cpc	r19, r1
 7ca:	f9 f0       	breq	.+62     	; 0x80a <malloc+0xb0>
 7cc:	28 1b       	sub	r18, r24
 7ce:	39 0b       	sbc	r19, r25
 7d0:	24 30       	cpi	r18, 0x04	; 4
 7d2:	31 05       	cpc	r19, r1
 7d4:	80 f4       	brcc	.+32     	; 0x7f6 <malloc+0x9c>
 7d6:	8a 81       	ldd	r24, Y+2	; 0x02
 7d8:	9b 81       	ldd	r25, Y+3	; 0x03
 7da:	61 15       	cp	r22, r1
 7dc:	71 05       	cpc	r23, r1
 7de:	21 f0       	breq	.+8      	; 0x7e8 <malloc+0x8e>
 7e0:	fb 01       	movw	r30, r22
 7e2:	93 83       	std	Z+3, r25	; 0x03
 7e4:	82 83       	std	Z+2, r24	; 0x02
 7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <malloc+0x96>
 7e8:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <__flp+0x1>
 7ec:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <__flp>
 7f0:	fe 01       	movw	r30, r28
 7f2:	32 96       	adiw	r30, 0x02	; 2
 7f4:	44 c0       	rjmp	.+136    	; 0x87e <malloc+0x124>
 7f6:	fe 01       	movw	r30, r28
 7f8:	e2 0f       	add	r30, r18
 7fa:	f3 1f       	adc	r31, r19
 7fc:	81 93       	st	Z+, r24
 7fe:	91 93       	st	Z+, r25
 800:	22 50       	subi	r18, 0x02	; 2
 802:	31 09       	sbc	r19, r1
 804:	39 83       	std	Y+1, r19	; 0x01
 806:	28 83       	st	Y, r18
 808:	3a c0       	rjmp	.+116    	; 0x87e <malloc+0x124>
 80a:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__brkval>
 80e:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <__brkval+0x1>
 812:	23 2b       	or	r18, r19
 814:	41 f4       	brne	.+16     	; 0x826 <malloc+0xcc>
 816:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 81a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 81e:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <__brkval+0x1>
 822:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <__brkval>
 826:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 82a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 82e:	21 15       	cp	r18, r1
 830:	31 05       	cpc	r19, r1
 832:	41 f4       	brne	.+16     	; 0x844 <malloc+0xea>
 834:	2d b7       	in	r18, 0x3d	; 61
 836:	3e b7       	in	r19, 0x3e	; 62
 838:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 83c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 840:	24 1b       	sub	r18, r20
 842:	35 0b       	sbc	r19, r21
 844:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <__brkval>
 848:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <__brkval+0x1>
 84c:	e2 17       	cp	r30, r18
 84e:	f3 07       	cpc	r31, r19
 850:	a0 f4       	brcc	.+40     	; 0x87a <malloc+0x120>
 852:	2e 1b       	sub	r18, r30
 854:	3f 0b       	sbc	r19, r31
 856:	28 17       	cp	r18, r24
 858:	39 07       	cpc	r19, r25
 85a:	78 f0       	brcs	.+30     	; 0x87a <malloc+0x120>
 85c:	ac 01       	movw	r20, r24
 85e:	4e 5f       	subi	r20, 0xFE	; 254
 860:	5f 4f       	sbci	r21, 0xFF	; 255
 862:	24 17       	cp	r18, r20
 864:	35 07       	cpc	r19, r21
 866:	48 f0       	brcs	.+18     	; 0x87a <malloc+0x120>
 868:	4e 0f       	add	r20, r30
 86a:	5f 1f       	adc	r21, r31
 86c:	50 93 8f 01 	sts	0x018F, r21	; 0x80018f <__brkval+0x1>
 870:	40 93 8e 01 	sts	0x018E, r20	; 0x80018e <__brkval>
 874:	81 93       	st	Z+, r24
 876:	91 93       	st	Z+, r25
 878:	02 c0       	rjmp	.+4      	; 0x87e <malloc+0x124>
 87a:	e0 e0       	ldi	r30, 0x00	; 0
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	cf 01       	movw	r24, r30
 880:	df 91       	pop	r29
 882:	cf 91       	pop	r28
 884:	1f 91       	pop	r17
 886:	0f 91       	pop	r16
 888:	08 95       	ret

0000088a <free>:
 88a:	cf 93       	push	r28
 88c:	df 93       	push	r29
 88e:	00 97       	sbiw	r24, 0x00	; 0
 890:	09 f4       	brne	.+2      	; 0x894 <free+0xa>
 892:	81 c0       	rjmp	.+258    	; 0x996 <__stack+0x97>
 894:	fc 01       	movw	r30, r24
 896:	32 97       	sbiw	r30, 0x02	; 2
 898:	13 82       	std	Z+3, r1	; 0x03
 89a:	12 82       	std	Z+2, r1	; 0x02
 89c:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <__flp>
 8a0:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <__flp+0x1>
 8a4:	10 97       	sbiw	r26, 0x00	; 0
 8a6:	81 f4       	brne	.+32     	; 0x8c8 <free+0x3e>
 8a8:	20 81       	ld	r18, Z
 8aa:	31 81       	ldd	r19, Z+1	; 0x01
 8ac:	82 0f       	add	r24, r18
 8ae:	93 1f       	adc	r25, r19
 8b0:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__brkval>
 8b4:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <__brkval+0x1>
 8b8:	28 17       	cp	r18, r24
 8ba:	39 07       	cpc	r19, r25
 8bc:	51 f5       	brne	.+84     	; 0x912 <__stack+0x13>
 8be:	f0 93 8f 01 	sts	0x018F, r31	; 0x80018f <__brkval+0x1>
 8c2:	e0 93 8e 01 	sts	0x018E, r30	; 0x80018e <__brkval>
 8c6:	67 c0       	rjmp	.+206    	; 0x996 <__stack+0x97>
 8c8:	ed 01       	movw	r28, r26
 8ca:	20 e0       	ldi	r18, 0x00	; 0
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	ce 17       	cp	r28, r30
 8d0:	df 07       	cpc	r29, r31
 8d2:	40 f4       	brcc	.+16     	; 0x8e4 <free+0x5a>
 8d4:	4a 81       	ldd	r20, Y+2	; 0x02
 8d6:	5b 81       	ldd	r21, Y+3	; 0x03
 8d8:	9e 01       	movw	r18, r28
 8da:	41 15       	cp	r20, r1
 8dc:	51 05       	cpc	r21, r1
 8de:	f1 f0       	breq	.+60     	; 0x91c <__stack+0x1d>
 8e0:	ea 01       	movw	r28, r20
 8e2:	f5 cf       	rjmp	.-22     	; 0x8ce <free+0x44>
 8e4:	d3 83       	std	Z+3, r29	; 0x03
 8e6:	c2 83       	std	Z+2, r28	; 0x02
 8e8:	40 81       	ld	r20, Z
 8ea:	51 81       	ldd	r21, Z+1	; 0x01
 8ec:	84 0f       	add	r24, r20
 8ee:	95 1f       	adc	r25, r21
 8f0:	c8 17       	cp	r28, r24
 8f2:	d9 07       	cpc	r29, r25
 8f4:	59 f4       	brne	.+22     	; 0x90c <__stack+0xd>
 8f6:	88 81       	ld	r24, Y
 8f8:	99 81       	ldd	r25, Y+1	; 0x01
 8fa:	84 0f       	add	r24, r20
 8fc:	95 1f       	adc	r25, r21
 8fe:	02 96       	adiw	r24, 0x02	; 2
 900:	91 83       	std	Z+1, r25	; 0x01
 902:	80 83       	st	Z, r24
 904:	8a 81       	ldd	r24, Y+2	; 0x02
 906:	9b 81       	ldd	r25, Y+3	; 0x03
 908:	93 83       	std	Z+3, r25	; 0x03
 90a:	82 83       	std	Z+2, r24	; 0x02
 90c:	21 15       	cp	r18, r1
 90e:	31 05       	cpc	r19, r1
 910:	29 f4       	brne	.+10     	; 0x91c <__stack+0x1d>
 912:	f0 93 91 01 	sts	0x0191, r31	; 0x800191 <__flp+0x1>
 916:	e0 93 90 01 	sts	0x0190, r30	; 0x800190 <__flp>
 91a:	3d c0       	rjmp	.+122    	; 0x996 <__stack+0x97>
 91c:	e9 01       	movw	r28, r18
 91e:	fb 83       	std	Y+3, r31	; 0x03
 920:	ea 83       	std	Y+2, r30	; 0x02
 922:	49 91       	ld	r20, Y+
 924:	59 91       	ld	r21, Y+
 926:	c4 0f       	add	r28, r20
 928:	d5 1f       	adc	r29, r21
 92a:	ec 17       	cp	r30, r28
 92c:	fd 07       	cpc	r31, r29
 92e:	61 f4       	brne	.+24     	; 0x948 <__stack+0x49>
 930:	80 81       	ld	r24, Z
 932:	91 81       	ldd	r25, Z+1	; 0x01
 934:	84 0f       	add	r24, r20
 936:	95 1f       	adc	r25, r21
 938:	02 96       	adiw	r24, 0x02	; 2
 93a:	e9 01       	movw	r28, r18
 93c:	99 83       	std	Y+1, r25	; 0x01
 93e:	88 83       	st	Y, r24
 940:	82 81       	ldd	r24, Z+2	; 0x02
 942:	93 81       	ldd	r25, Z+3	; 0x03
 944:	9b 83       	std	Y+3, r25	; 0x03
 946:	8a 83       	std	Y+2, r24	; 0x02
 948:	e0 e0       	ldi	r30, 0x00	; 0
 94a:	f0 e0       	ldi	r31, 0x00	; 0
 94c:	12 96       	adiw	r26, 0x02	; 2
 94e:	8d 91       	ld	r24, X+
 950:	9c 91       	ld	r25, X
 952:	13 97       	sbiw	r26, 0x03	; 3
 954:	00 97       	sbiw	r24, 0x00	; 0
 956:	19 f0       	breq	.+6      	; 0x95e <__stack+0x5f>
 958:	fd 01       	movw	r30, r26
 95a:	dc 01       	movw	r26, r24
 95c:	f7 cf       	rjmp	.-18     	; 0x94c <__stack+0x4d>
 95e:	8d 91       	ld	r24, X+
 960:	9c 91       	ld	r25, X
 962:	11 97       	sbiw	r26, 0x01	; 1
 964:	9d 01       	movw	r18, r26
 966:	2e 5f       	subi	r18, 0xFE	; 254
 968:	3f 4f       	sbci	r19, 0xFF	; 255
 96a:	82 0f       	add	r24, r18
 96c:	93 1f       	adc	r25, r19
 96e:	20 91 8e 01 	lds	r18, 0x018E	; 0x80018e <__brkval>
 972:	30 91 8f 01 	lds	r19, 0x018F	; 0x80018f <__brkval+0x1>
 976:	28 17       	cp	r18, r24
 978:	39 07       	cpc	r19, r25
 97a:	69 f4       	brne	.+26     	; 0x996 <__stack+0x97>
 97c:	30 97       	sbiw	r30, 0x00	; 0
 97e:	29 f4       	brne	.+10     	; 0x98a <__stack+0x8b>
 980:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <__flp+0x1>
 984:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <__flp>
 988:	02 c0       	rjmp	.+4      	; 0x98e <__stack+0x8f>
 98a:	13 82       	std	Z+3, r1	; 0x03
 98c:	12 82       	std	Z+2, r1	; 0x02
 98e:	b0 93 8f 01 	sts	0x018F, r27	; 0x80018f <__brkval+0x1>
 992:	a0 93 8e 01 	sts	0x018E, r26	; 0x80018e <__brkval>
 996:	df 91       	pop	r29
 998:	cf 91       	pop	r28
 99a:	08 95       	ret

0000099c <realloc>:
 99c:	a0 e0       	ldi	r26, 0x00	; 0
 99e:	b0 e0       	ldi	r27, 0x00	; 0
 9a0:	e4 ed       	ldi	r30, 0xD4	; 212
 9a2:	f4 e0       	ldi	r31, 0x04	; 4
 9a4:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__prologue_saves__+0x8>
 9a8:	ec 01       	movw	r28, r24
 9aa:	00 97       	sbiw	r24, 0x00	; 0
 9ac:	21 f4       	brne	.+8      	; 0x9b6 <realloc+0x1a>
 9ae:	cb 01       	movw	r24, r22
 9b0:	0e 94 ad 03 	call	0x75a	; 0x75a <malloc>
 9b4:	b4 c0       	rjmp	.+360    	; 0xb1e <realloc+0x182>
 9b6:	fc 01       	movw	r30, r24
 9b8:	e6 0f       	add	r30, r22
 9ba:	f7 1f       	adc	r31, r23
 9bc:	9c 01       	movw	r18, r24
 9be:	22 50       	subi	r18, 0x02	; 2
 9c0:	31 09       	sbc	r19, r1
 9c2:	e2 17       	cp	r30, r18
 9c4:	f3 07       	cpc	r31, r19
 9c6:	08 f4       	brcc	.+2      	; 0x9ca <realloc+0x2e>
 9c8:	a8 c0       	rjmp	.+336    	; 0xb1a <realloc+0x17e>
 9ca:	d9 01       	movw	r26, r18
 9cc:	0d 91       	ld	r16, X+
 9ce:	1c 91       	ld	r17, X
 9d0:	11 97       	sbiw	r26, 0x01	; 1
 9d2:	06 17       	cp	r16, r22
 9d4:	17 07       	cpc	r17, r23
 9d6:	b0 f0       	brcs	.+44     	; 0xa04 <realloc+0x68>
 9d8:	05 30       	cpi	r16, 0x05	; 5
 9da:	11 05       	cpc	r17, r1
 9dc:	08 f4       	brcc	.+2      	; 0x9e0 <realloc+0x44>
 9de:	9b c0       	rjmp	.+310    	; 0xb16 <realloc+0x17a>
 9e0:	c8 01       	movw	r24, r16
 9e2:	04 97       	sbiw	r24, 0x04	; 4
 9e4:	86 17       	cp	r24, r22
 9e6:	97 07       	cpc	r25, r23
 9e8:	08 f4       	brcc	.+2      	; 0x9ec <realloc+0x50>
 9ea:	95 c0       	rjmp	.+298    	; 0xb16 <realloc+0x17a>
 9ec:	02 50       	subi	r16, 0x02	; 2
 9ee:	11 09       	sbc	r17, r1
 9f0:	06 1b       	sub	r16, r22
 9f2:	17 0b       	sbc	r17, r23
 9f4:	01 93       	st	Z+, r16
 9f6:	11 93       	st	Z+, r17
 9f8:	6d 93       	st	X+, r22
 9fa:	7c 93       	st	X, r23
 9fc:	cf 01       	movw	r24, r30
 9fe:	0e 94 45 04 	call	0x88a	; 0x88a <free>
 a02:	89 c0       	rjmp	.+274    	; 0xb16 <realloc+0x17a>
 a04:	5b 01       	movw	r10, r22
 a06:	a0 1a       	sub	r10, r16
 a08:	b1 0a       	sbc	r11, r17
 a0a:	4c 01       	movw	r8, r24
 a0c:	80 0e       	add	r8, r16
 a0e:	91 1e       	adc	r9, r17
 a10:	a0 91 90 01 	lds	r26, 0x0190	; 0x800190 <__flp>
 a14:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <__flp+0x1>
 a18:	61 2c       	mov	r6, r1
 a1a:	71 2c       	mov	r7, r1
 a1c:	e1 2c       	mov	r14, r1
 a1e:	f1 2c       	mov	r15, r1
 a20:	10 97       	sbiw	r26, 0x00	; 0
 a22:	09 f4       	brne	.+2      	; 0xa26 <realloc+0x8a>
 a24:	46 c0       	rjmp	.+140    	; 0xab2 <realloc+0x116>
 a26:	8d 91       	ld	r24, X+
 a28:	9c 91       	ld	r25, X
 a2a:	11 97       	sbiw	r26, 0x01	; 1
 a2c:	a8 15       	cp	r26, r8
 a2e:	b9 05       	cpc	r27, r9
 a30:	b1 f5       	brne	.+108    	; 0xa9e <realloc+0x102>
 a32:	6c 01       	movw	r12, r24
 a34:	42 e0       	ldi	r20, 0x02	; 2
 a36:	c4 0e       	add	r12, r20
 a38:	d1 1c       	adc	r13, r1
 a3a:	ca 14       	cp	r12, r10
 a3c:	db 04       	cpc	r13, r11
 a3e:	78 f1       	brcs	.+94     	; 0xa9e <realloc+0x102>
 a40:	4c 01       	movw	r8, r24
 a42:	8a 18       	sub	r8, r10
 a44:	9b 08       	sbc	r9, r11
 a46:	64 01       	movw	r12, r8
 a48:	42 e0       	ldi	r20, 0x02	; 2
 a4a:	c4 0e       	add	r12, r20
 a4c:	d1 1c       	adc	r13, r1
 a4e:	12 96       	adiw	r26, 0x02	; 2
 a50:	bc 90       	ld	r11, X
 a52:	12 97       	sbiw	r26, 0x02	; 2
 a54:	13 96       	adiw	r26, 0x03	; 3
 a56:	ac 91       	ld	r26, X
 a58:	b5 e0       	ldi	r27, 0x05	; 5
 a5a:	cb 16       	cp	r12, r27
 a5c:	d1 04       	cpc	r13, r1
 a5e:	40 f0       	brcs	.+16     	; 0xa70 <realloc+0xd4>
 a60:	b2 82       	std	Z+2, r11	; 0x02
 a62:	a3 83       	std	Z+3, r26	; 0x03
 a64:	91 82       	std	Z+1, r9	; 0x01
 a66:	80 82       	st	Z, r8
 a68:	d9 01       	movw	r26, r18
 a6a:	6d 93       	st	X+, r22
 a6c:	7c 93       	st	X, r23
 a6e:	09 c0       	rjmp	.+18     	; 0xa82 <realloc+0xe6>
 a70:	0e 5f       	subi	r16, 0xFE	; 254
 a72:	1f 4f       	sbci	r17, 0xFF	; 255
 a74:	80 0f       	add	r24, r16
 a76:	91 1f       	adc	r25, r17
 a78:	f9 01       	movw	r30, r18
 a7a:	91 83       	std	Z+1, r25	; 0x01
 a7c:	80 83       	st	Z, r24
 a7e:	eb 2d       	mov	r30, r11
 a80:	fa 2f       	mov	r31, r26
 a82:	e1 14       	cp	r14, r1
 a84:	f1 04       	cpc	r15, r1
 a86:	31 f0       	breq	.+12     	; 0xa94 <realloc+0xf8>
 a88:	d7 01       	movw	r26, r14
 a8a:	13 96       	adiw	r26, 0x03	; 3
 a8c:	fc 93       	st	X, r31
 a8e:	ee 93       	st	-X, r30
 a90:	12 97       	sbiw	r26, 0x02	; 2
 a92:	41 c0       	rjmp	.+130    	; 0xb16 <realloc+0x17a>
 a94:	f0 93 91 01 	sts	0x0191, r31	; 0x800191 <__flp+0x1>
 a98:	e0 93 90 01 	sts	0x0190, r30	; 0x800190 <__flp>
 a9c:	3c c0       	rjmp	.+120    	; 0xb16 <realloc+0x17a>
 a9e:	68 16       	cp	r6, r24
 aa0:	79 06       	cpc	r7, r25
 aa2:	08 f4       	brcc	.+2      	; 0xaa6 <realloc+0x10a>
 aa4:	3c 01       	movw	r6, r24
 aa6:	7d 01       	movw	r14, r26
 aa8:	12 96       	adiw	r26, 0x02	; 2
 aaa:	0d 90       	ld	r0, X+
 aac:	bc 91       	ld	r27, X
 aae:	a0 2d       	mov	r26, r0
 ab0:	b7 cf       	rjmp	.-146    	; 0xa20 <realloc+0x84>
 ab2:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <__brkval>
 ab6:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <__brkval+0x1>
 aba:	88 16       	cp	r8, r24
 abc:	99 06       	cpc	r9, r25
 abe:	e1 f4       	brne	.+56     	; 0xaf8 <realloc+0x15c>
 ac0:	66 16       	cp	r6, r22
 ac2:	77 06       	cpc	r7, r23
 ac4:	c8 f4       	brcc	.+50     	; 0xaf8 <realloc+0x15c>
 ac6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 aca:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 ace:	00 97       	sbiw	r24, 0x00	; 0
 ad0:	41 f4       	brne	.+16     	; 0xae2 <realloc+0x146>
 ad2:	8d b7       	in	r24, 0x3d	; 61
 ad4:	9e b7       	in	r25, 0x3e	; 62
 ad6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 ada:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 ade:	84 1b       	sub	r24, r20
 ae0:	95 0b       	sbc	r25, r21
 ae2:	e8 17       	cp	r30, r24
 ae4:	f9 07       	cpc	r31, r25
 ae6:	c8 f4       	brcc	.+50     	; 0xb1a <realloc+0x17e>
 ae8:	f0 93 8f 01 	sts	0x018F, r31	; 0x80018f <__brkval+0x1>
 aec:	e0 93 8e 01 	sts	0x018E, r30	; 0x80018e <__brkval>
 af0:	f9 01       	movw	r30, r18
 af2:	71 83       	std	Z+1, r23	; 0x01
 af4:	60 83       	st	Z, r22
 af6:	0f c0       	rjmp	.+30     	; 0xb16 <realloc+0x17a>
 af8:	cb 01       	movw	r24, r22
 afa:	0e 94 ad 03 	call	0x75a	; 0x75a <malloc>
 afe:	7c 01       	movw	r14, r24
 b00:	00 97       	sbiw	r24, 0x00	; 0
 b02:	59 f0       	breq	.+22     	; 0xb1a <realloc+0x17e>
 b04:	a8 01       	movw	r20, r16
 b06:	be 01       	movw	r22, r28
 b08:	0e 94 94 05 	call	0xb28	; 0xb28 <memcpy>
 b0c:	ce 01       	movw	r24, r28
 b0e:	0e 94 45 04 	call	0x88a	; 0x88a <free>
 b12:	c7 01       	movw	r24, r14
 b14:	04 c0       	rjmp	.+8      	; 0xb1e <realloc+0x182>
 b16:	ce 01       	movw	r24, r28
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <realloc+0x182>
 b1a:	80 e0       	ldi	r24, 0x00	; 0
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	cd b7       	in	r28, 0x3d	; 61
 b20:	de b7       	in	r29, 0x3e	; 62
 b22:	ee e0       	ldi	r30, 0x0E	; 14
 b24:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__epilogue_restores__+0x8>

00000b28 <memcpy>:
 b28:	fb 01       	movw	r30, r22
 b2a:	dc 01       	movw	r26, r24
 b2c:	02 c0       	rjmp	.+4      	; 0xb32 <memcpy+0xa>
 b2e:	01 90       	ld	r0, Z+
 b30:	0d 92       	st	X+, r0
 b32:	41 50       	subi	r20, 0x01	; 1
 b34:	50 40       	sbci	r21, 0x00	; 0
 b36:	d8 f7       	brcc	.-10     	; 0xb2e <memcpy+0x6>
 b38:	08 95       	ret

00000b3a <memset>:
 b3a:	dc 01       	movw	r26, r24
 b3c:	01 c0       	rjmp	.+2      	; 0xb40 <memset+0x6>
 b3e:	6d 93       	st	X+, r22
 b40:	41 50       	subi	r20, 0x01	; 1
 b42:	50 40       	sbci	r21, 0x00	; 0
 b44:	e0 f7       	brcc	.-8      	; 0xb3e <memset+0x4>
 b46:	08 95       	ret

00000b48 <__prologue_saves__>:
 b48:	2f 92       	push	r2
 b4a:	3f 92       	push	r3
 b4c:	4f 92       	push	r4
 b4e:	5f 92       	push	r5
 b50:	6f 92       	push	r6
 b52:	7f 92       	push	r7
 b54:	8f 92       	push	r8
 b56:	9f 92       	push	r9
 b58:	af 92       	push	r10
 b5a:	bf 92       	push	r11
 b5c:	cf 92       	push	r12
 b5e:	df 92       	push	r13
 b60:	ef 92       	push	r14
 b62:	ff 92       	push	r15
 b64:	0f 93       	push	r16
 b66:	1f 93       	push	r17
 b68:	cf 93       	push	r28
 b6a:	df 93       	push	r29
 b6c:	cd b7       	in	r28, 0x3d	; 61
 b6e:	de b7       	in	r29, 0x3e	; 62
 b70:	ca 1b       	sub	r28, r26
 b72:	db 0b       	sbc	r29, r27
 b74:	0f b6       	in	r0, 0x3f	; 63
 b76:	f8 94       	cli
 b78:	de bf       	out	0x3e, r29	; 62
 b7a:	0f be       	out	0x3f, r0	; 63
 b7c:	cd bf       	out	0x3d, r28	; 61
 b7e:	09 94       	ijmp

00000b80 <__epilogue_restores__>:
 b80:	2a 88       	ldd	r2, Y+18	; 0x12
 b82:	39 88       	ldd	r3, Y+17	; 0x11
 b84:	48 88       	ldd	r4, Y+16	; 0x10
 b86:	5f 84       	ldd	r5, Y+15	; 0x0f
 b88:	6e 84       	ldd	r6, Y+14	; 0x0e
 b8a:	7d 84       	ldd	r7, Y+13	; 0x0d
 b8c:	8c 84       	ldd	r8, Y+12	; 0x0c
 b8e:	9b 84       	ldd	r9, Y+11	; 0x0b
 b90:	aa 84       	ldd	r10, Y+10	; 0x0a
 b92:	b9 84       	ldd	r11, Y+9	; 0x09
 b94:	c8 84       	ldd	r12, Y+8	; 0x08
 b96:	df 80       	ldd	r13, Y+7	; 0x07
 b98:	ee 80       	ldd	r14, Y+6	; 0x06
 b9a:	fd 80       	ldd	r15, Y+5	; 0x05
 b9c:	0c 81       	ldd	r16, Y+4	; 0x04
 b9e:	1b 81       	ldd	r17, Y+3	; 0x03
 ba0:	aa 81       	ldd	r26, Y+2	; 0x02
 ba2:	b9 81       	ldd	r27, Y+1	; 0x01
 ba4:	ce 0f       	add	r28, r30
 ba6:	d1 1d       	adc	r29, r1
 ba8:	0f b6       	in	r0, 0x3f	; 63
 baa:	f8 94       	cli
 bac:	de bf       	out	0x3e, r29	; 62
 bae:	0f be       	out	0x3f, r0	; 63
 bb0:	cd bf       	out	0x3d, r28	; 61
 bb2:	ed 01       	movw	r28, r26
 bb4:	08 95       	ret

00000bb6 <_exit>:
 bb6:	f8 94       	cli

00000bb8 <__stop_program>:
 bb8:	ff cf       	rjmp	.-2      	; 0xbb8 <__stop_program>
